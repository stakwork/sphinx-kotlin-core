import chat.sphinx.wrapper.DateTime;
import chat.sphinx.wrapper.PhotoUrl;
import chat.sphinx.wrapper.Seen;
import chat.sphinx.wrapper.chat.ChatAlias;
import chat.sphinx.wrapper.chat.ChatGroupKey;
import chat.sphinx.wrapper.chat.ChatHost;
import chat.sphinx.wrapper.chat.ChatMetaData;
import chat.sphinx.wrapper.chat.ChatMuted;
import chat.sphinx.wrapper.chat.ChatName;
import chat.sphinx.wrapper.chat.ChatPrivate;
import chat.sphinx.wrapper.chat.ChatStatus;
import chat.sphinx.wrapper.chat.ChatType;
import chat.sphinx.wrapper.chat.ChatUUID;
import chat.sphinx.wrapper.chat.ChatUnlisted;
import chat.sphinx.wrapper.chat.Push;
import chat.sphinx.wrapper.contact.Blocked;
import chat.sphinx.wrapper.contact.ContactAlias;
import chat.sphinx.wrapper.contact.ContactStatus;
import chat.sphinx.wrapper.contact.DeviceId;
import chat.sphinx.wrapper.contact.NotificationSound;
import chat.sphinx.wrapper.contact.Owner;
import chat.sphinx.wrapper.contact.PrivatePhoto;
import chat.sphinx.wrapper.dashboard.ChatId;
import chat.sphinx.wrapper.dashboard.ContactId;
import chat.sphinx.wrapper.dashboard.DashboardItemId;
import chat.sphinx.wrapper.dashboard.InviteId;
import chat.sphinx.wrapper.feed.FeedAuthor;
import chat.sphinx.wrapper.feed.FeedContentType;
import chat.sphinx.wrapper.feed.FeedDescription;
import chat.sphinx.wrapper.feed.FeedDestinationAddress;
import chat.sphinx.wrapper.feed.FeedDestinationSplit;
import chat.sphinx.wrapper.feed.FeedDestinationType;
import chat.sphinx.wrapper.feed.FeedEnclosureLength;
import chat.sphinx.wrapper.feed.FeedEnclosureType;
import chat.sphinx.wrapper.feed.FeedGenerator;
import chat.sphinx.wrapper.feed.FeedId;
import chat.sphinx.wrapper.feed.FeedItemDuration;
import chat.sphinx.wrapper.feed.FeedItemsCount;
import chat.sphinx.wrapper.feed.FeedLanguage;
import chat.sphinx.wrapper.feed.FeedModelSuggested;
import chat.sphinx.wrapper.feed.FeedModelType;
import chat.sphinx.wrapper.feed.FeedTitle;
import chat.sphinx.wrapper.feed.FeedType;
import chat.sphinx.wrapper.feed.FeedUrl;
import chat.sphinx.wrapper.feed.Subscribed;
import chat.sphinx.wrapper.invite.InviteCode;
import chat.sphinx.wrapper.invite.InviteStatus;
import chat.sphinx.wrapper.invite.InviteString;
import chat.sphinx.wrapper.lightning.LightningNodeAlias;
import chat.sphinx.wrapper.lightning.LightningNodePubKey;
import chat.sphinx.wrapper.lightning.LightningPaymentHash;
import chat.sphinx.wrapper.lightning.LightningPaymentRequest;
import chat.sphinx.wrapper.lightning.LightningRouteHint;
import chat.sphinx.wrapper.lightning.Sat;
import chat.sphinx.wrapper.message.ErrorMessage;
import chat.sphinx.wrapper.message.Flagged;
import chat.sphinx.wrapper.message.MessageContent;
import chat.sphinx.wrapper.message.MessageContentDecrypted;
import chat.sphinx.wrapper.message.MessageId;
import chat.sphinx.wrapper.message.MessageMUID;
import chat.sphinx.wrapper.message.MessagePerson;
import chat.sphinx.wrapper.message.MessageStatus;
import chat.sphinx.wrapper.message.MessageType;
import chat.sphinx.wrapper.message.MessageUUID;
import chat.sphinx.wrapper.message.RecipientAlias;
import chat.sphinx.wrapper.message.ReplyUUID;
import chat.sphinx.wrapper.message.SenderAlias;
import chat.sphinx.wrapper.message.TagMessage;
import chat.sphinx.wrapper.message.media.FileName;
import chat.sphinx.wrapper.message.media.MediaKey;
import chat.sphinx.wrapper.message.media.MediaKeyDecrypted;
import chat.sphinx.wrapper.message.media.MediaToken;
import chat.sphinx.wrapper.message.media.MediaType;
import chat.sphinx.wrapper.rsa.RsaPublicKey;
import chat.sphinx.wrapper.subscription.Cron;
import chat.sphinx.wrapper.subscription.EndNumber;
import chat.sphinx.wrapper.subscription.SubscriptionCount;
import chat.sphinx.wrapper.subscription.SubscriptionId;
import chat.sphinx.wrapper_chat.NotificationLevel;
import chat.sphinx.wrapper_message.ThreadUUID;
import kotlin.collections.List;
import okio.Path;

CREATE TABLE chatDbo(
    id                          INTEGER         AS ChatId NOT NULL PRIMARY KEY,
    uuid                        TEXT            AS ChatUUID NOT NULL UNIQUE,
    name                        TEXT            AS ChatName,
    photo_url                   TEXT            AS PhotoUrl,
    type                        INTEGER         AS ChatType NOT NULL,
    status                      INTEGER         AS ChatStatus NOT NULL,
    contact_ids                 TEXT            AS List<ContactId> NOT NULL,
    is_muted                    INTEGER         AS ChatMuted NOT NULL,
    created_at                  INTEGER         AS DateTime NOT NULL,
    group_key                   TEXT            AS ChatGroupKey,
    host                        TEXT            AS ChatHost,
    price_per_message           INTEGER         AS Sat,
    escrow_amount               INTEGER         AS Sat,
    unlisted                    INTEGER         AS ChatUnlisted NOT NULL,
    private_tribe               INTEGER         AS ChatPrivate NOT NULL,
    owner_pub_key               TEXT            AS LightningNodePubKey,
    seen                        INTEGER         AS Seen NOT NULL,
    meta_data                   TEXT            AS ChatMetaData,
    my_photo_url                TEXT            AS PhotoUrl,
    my_alias                    TEXT            AS ChatAlias,
    pending_contact_ids         TEXT            AS List<ContactId>,
    latest_message_id           INTEGER         AS MessageId DEFAULT NULL,
    content_seen_at             INTEGER         AS DateTime,
    notify                      INTEGER         AS NotificationLevel

);

chatUpdateNameAndStatus:
UPDATE chatDbo
SET name = :name,
    status = :status
WHERE id = ?;

chatUpdateLatestMessage:
UPDATE chatDbo
SET latest_message_id = :latest_message_id
WHERE id = ?;

chatUpdateMuted:
UPDATE chatDbo
SET is_muted = :muted
WHERE id = ?;

chatUpdateNotificationLevel:
UPDATE chatDbo
SET notify = :notify
WHERE id = ?;

chatUpdateContentSeenAt:
UPDATE chatDbo
SET content_seen_at = :content_seen_at
WHERE id = ?;

chatGetAll:
SELECT *
FROM chatDbo;

chatGetAllContact:
SELECT *
FROM chatDbo
WHERE type = 0; -- ChatType.CONVERSATION

chatGetAllTribe:
SELECT *
FROM chatDbo
WHERE type = 2; -- ChatType.TRIBE

chatGetAllIds:
SELECT id
FROM chatDbo;

chatGetAllByIds:
SELECT *
FROM chatDbo
WHERE id IN :chat_ids;

chatGetById:
SELECT *
FROM chatDbo
WHERE id = ?;

chatGetByUUID:
SELECT *
FROM chatDbo
WHERE uuid = ?;

chatGetAllByUUIDS:
SELECT *
FROM chatDbo
WHERE uuid IN :uuid;

chatGetConversationForContact:
SELECT *
FROM chatDbo
WHERE type = 0 AND contact_ids = ?
LIMIT 1;

chatGetLastTribeId:
SELECT MIN(id) FROM chatDbo
WHERE type = 2
AND id > 10000;

chatUpsert {
    UPDATE chatDbo
    SET name = :name,
        photo_url = :photo_url,
        status = :status,
        contact_ids = :contact_ids,
        is_muted = :is_muted,
        group_key = :group_key,
        host = :host,
        unlisted = :unlisted,
        private_tribe = :private_tribe,
        owner_pub_key = :owner_pub_key,
        seen = :seen,
        meta_data = :meta_data,
        my_photo_url = :my_photo_url,
        my_alias = :my_alias,
        pending_contact_ids = :pending_contact_ids,
        notify = :notify
    WHERE id = :id;

    INSERT OR IGNORE INTO chatDbo(
        id,
        uuid,
        name,
        photo_url,
        type,
        status,
        contact_ids,
        is_muted,
        created_at,
        group_key,
        host,
        price_per_message,
        escrow_amount,
        unlisted,
        private_tribe,
        owner_pub_key,
        seen,
        meta_data,
        my_photo_url,
        my_alias,
        pending_contact_ids,
        notify
    )
    VALUES (
        :id,
        :uuid,
        :name,
        :photo_url,
        :type,
        :status,
        :contact_ids,
        :is_muted,
        :created_at,
        :group_key,
        :host,
        :price_per_message,
        :escrow_amount,
        :unlisted,
        :private_tribe,
        :owner_pub_key,
        :seen,
        :meta_data,
        :my_photo_url,
        :my_alias,
        :pending_contact_ids,
        :notify
    );
}

chatDeleteById:
DELETE FROM chatDbo
WHERE id = ?;

chatUpdateMetaData:
UPDATE chatDbo
SET meta_data = :meta_data
WHERE id = ?;

chatUpdateSeen:
UPDATE chatDbo
SET seen = :seen
WHERE id = ?;

chatUpdateDetails:
UPDATE chatDbo
SET photo_url = :photo_url,
    status = :status
WHERE id = ?;

chatUpdateTribeData:
UPDATE chatDbo
SET price_per_message = :price_per_message,
    escrow_amount = :escrow_amount,
    name = :name,
    photo_url = :photo_url
WHERE id = ?;

chatUpdateSeenByLastMessage:
UPDATE chatDbo
SET seen = 1
WHERE id = ?
AND latest_message_id = ?;

chatDeleteAll:
DELETE FROM chatDbo;

CREATE TABLE contactDbo(
    id                          INTEGER         AS ContactId NOT NULL PRIMARY KEY,
    route_hint                  TEXT            AS LightningRouteHint,
    node_pub_key                TEXT            AS LightningNodePubKey,
    node_alias                  TEXT            AS LightningNodeAlias,
    alias                       TEXT            AS ContactAlias,
    photo_url                   TEXT            AS PhotoUrl,
    private_photo               INTEGER         AS PrivatePhoto NOT NULL,
    owner                       INTEGER         AS Owner NOT NULL,
    status                      INTEGER         AS ContactStatus NOT NULL,
    public_key                  TEXT            AS RsaPublicKey,
    device_id                   TEXT            AS DeviceId,
    created_at                  INTEGER         AS DateTime NOT NULL,
    updated_at                  INTEGER         AS DateTime NOT NULL,
    notification_sound          TEXT            AS NotificationSound,
    tip_amount                  INTEGER         AS Sat,
    invite_id                   INTEGER         AS InviteId,
    invite_status               INTEGER         AS InviteStatus,
    blocked                     INTEGER         AS Blocked NOT NULL DEFAULT 0
);

contactGetAllIds:
SELECT id
FROM contactDbo;

contactGetAll:
SELECT *
FROM contactDbo;

contactGetNotBlocked:
SELECT *
FROM contactDbo
WHERE blocked = 0;

contactGetBlocked:
SELECT *
FROM contactDbo
WHERE blocked = 1;

contactGetAllByIds:
SELECT *
FROM contactDbo
WHERE id IN :contact_ids;

contactGetById:
SELECT *
FROM contactDbo
WHERE id = ?;

contactGetByPubKey:
SELECT *
FROM contactDbo
WHERE node_pub_key = ?
ORDER BY id
LIMIT 1;

contactGetOwner:
SELECT *
FROM contactDbo
WHERE owner = 1
ORDER BY id
LIMIT 1;

contactGetLastContactIndex:
SELECT id
FROM contactDbo
ORDER BY id DESC
LIMIT 1;

contactUpsert {
    UPDATE contactDbo
    SET route_hint = :route_hint,
        node_pub_key = :node_pub_key,
        node_alias = :node_alias,
        alias = :alias,
        photo_url = :photo_url,
        private_photo = :private_photo,
        status = :status,
        public_key = :public_key,
        device_id = :device_id,
        updated_at = :updated_at,
        notification_sound = :notification_sound,
        tip_amount = :tip_amount,
        blocked = :blocked
    WHERE id = :id;

    INSERT OR IGNORE INTO contactDbo(
        id,
        route_hint,
        node_pub_key,
        node_alias,
        alias,
        photo_url,
        private_photo,
        owner,
        status,
        public_key,
        device_id,
        created_at,
        updated_at,
        notification_sound,
        tip_amount,
        blocked
    )
    VALUES (
        :id,
        :route_hint,
        :node_pub_key,
        :node_alias,
        :alias,
        :photo_url,
        :private_photo,
        :owner,
        :status,
        :public_key,
        :device_id,
        :created_at,
        :updated_at,
        :notification_sound,
        :tip_amount,
        :blocked
    );
}

contactUpdateInviteStatus:
UPDATE contactDbo
SET invite_status = :invite_status
WHERE invite_id = ?;

contactUpdateInvite:
UPDATE contactDbo
SET invite_status = :invite_status,
invite_id = :invite_id
WHERE id = ?;

contactUpdatePhotoUrl:
UPDATE contactDbo
SET photo_url = :photo_url
WHERE id = ?;

contactUpdateAlias:
UPDATE contactDbo
SET alias = :alias
WHERE id = ?;

contactUpdateDetails:
UPDATE contactDbo
SET alias = :alias,
    photo_url = :photo_url,
    status = :status
WHERE id = ? AND id != 0;

contactUpdateOwnerDetails:
UPDATE contactDbo
SET alias = :alias,
    private_photo = :private_photo,
    tip_amount = :tip_amount
WHERE id = 0;

contactUpdateInvitee:
UPDATE contactDbo
SET alias = :alias,
    photo_url = :photo_url,
    node_pub_key = :node_pub_key,
    status = :status,
    route_hint = :route_hint
WHERE id = ?;

contactUpdateBlocked:
UPDATE contactDbo
SET blocked = :blocked
WHERE id = ?;

contactDeleteById:
DELETE FROM contactDbo
WHERE id = ?;

contactDeleteAll:
DELETE FROM contactDbo;

CREATE TABLE inviteDbo(
    id                          INTEGER         AS InviteId NOT NULL PRIMARY KEY,
    invite_string               TEXT            AS InviteString NOT NULL,
    invoice                     TEXT            AS LightningPaymentRequest,
--     welcome_message             TEXT,
    contact_id                  INTEGER         AS ContactId NOT NULL,
    status                      INTEGER         AS InviteStatus NOT NULL,
    price                       INTEGER         AS Sat,
    created_at                  INTEGER         AS DateTime NOT NULL,
    invite_code                 TEXT            AS InviteCode
);

inviteGetAll:
SELECT *
FROM inviteDbo;

inviteGetById:
SELECT *
FROM inviteDbo
WHERE id = ?;

inviteGetByContactId:
SELECT *
FROM inviteDbo
WHERE contact_id = ?;

inviteUpdateStatus:
UPDATE inviteDbo
SET status = :status
WHERE id = ?;

inviteGetByCode:
SELECT *
FROM inviteDbo
WHERE invite_code = ?;

inviteUpsert {
    UPDATE inviteDbo
    SET invite_string = :invite_string,
        invite_code = :invite_code,
        invoice = :invoice,
        status = :status,
        price = :price
    WHERE id = :id;

    INSERT OR IGNORE INTO inviteDbo(
        id,
        invite_string,
        invite_code,
        invoice,
        contact_id,
        status,
        price,
        created_at
    )
    VALUES (
        :id,
        :invite_string,
        :invite_code,
        :invoice,
        :contact_id,
        :status,
        :price,
        :created_at
    );
}

inviteDeleteById:
DELETE FROM inviteDbo
WHERE id = ?;

inviteDeleteByContactId:
DELETE FROM inviteDbo
WHERE contact_id = ?;

inviteDeleteAll:
DELETE FROM inviteDbo;

CREATE TABLE dashboardDbo(
    id                          TEXT            AS DashboardItemId NOT NULL PRIMARY KEY,
    contact_id                  INTEGER         AS ContactId,
    date                        INTEGER         AS DateTime NOT NULL,
    display_name                TEXT,
    muted                       INTEGER         AS ChatMuted NOT NULL DEFAULT 1,
    seen                        INTEGER         AS Seen NOT NULL,
    photo_url                   TEXT            AS PhotoUrl,

--  This is for contacts only. When a Chat of type Conversation comes in, the Contact held
--  here is updated as `include_in_return=false`
    include_in_return            INTEGER        AS Boolean DEFAULT 1 NOT NULL,

    latest_message_id           INTEGER         AS MessageId DEFAULT NULL
);

dashboardCount:
SELECT COUNT(*)
FROM dashboardDbo
WHERE include_in_return = 1;

dashboardPagination:
SELECT *
FROM dashboardDbo
WHERE include_in_return = 1
ORDER BY
    SUBSTR(id, 1, 1),
    date
LIMIT :limit OFFSET :offset;

dashboardUpdateLatestMessage:
UPDATE dashboardDbo
SET date = :date,
    latest_message_id = :latest_message_id
WHERE id = ?;

dashboardUpdateIncludeInReturn:
UPDATE dashboardDbo
SET include_in_return = :include_in_return
WHERE id = ?;

dashboardUpdateMuted:
UPDATE dashboardDbo
SET muted = :muted
WHERE id = ?;

dashboardUpdateTribe:
UPDATE dashboardDbo
SET display_name = :display_name,
    photo_url = :photo_url
WHERE id = ?;

dashboardUpdateConversation:
UPDATE dashboardDbo
SET display_name = :display_name,
    photo_url = :photo_url
WHERE contact_id = ?;

dashboardUpsert {
    UPDATE dashboardDbo
    SET display_name = :display_name,
        muted = :muted,
        seen = :seen,
        photo_url = :photo_url
    WHERE id = :id;

    INSERT OR IGNORE INTO dashboardDbo(
        id,
        contact_id,
        date,
        display_name,
        muted,
        seen,
        photo_url
    )
    VALUES (
        :id,
        :contact_id,
        :date,
        :display_name,
        :muted,
        :seen,
        :photo_url
    );
}

dashboardDeleteById:
DELETE FROM dashboardDbo
WHERE id = ?;

dashboardDeleteAll:
DELETE FROM dashboardDbo;

-- Cannot use inline classes if there are 23 or more columns
-- https://youtrack.jetbrains.com/issue/KT-45084
-- https://github.com/cashapp/sqldelight/issues/2266
--
-- Because of this, the messageMediaDbo table exists as an extension
-- where the messageID is utilized as the primary key.
CREATE TABLE messageDbo(
    id                          INTEGER         AS MessageId NOT NULL PRIMARY KEY,
    uuid                        TEXT            AS MessageUUID,
    chat_id                     INTEGER         AS ChatId NOT NULL,
    type                        INTEGER         AS MessageType NOT NULL,
    sender                      INTEGER         AS ContactId NOT NULL,
    receiver                    INTEGER         AS ContactId,
    amount                      INTEGER         AS Sat NOT NULL,
    payment_hash                TEXT            AS LightningPaymentHash,
    payment_request             TEXT            AS LightningPaymentRequest,
    date                        INTEGER         AS DateTime NOT NULL,
    expiration_date             INTEGER         AS DateTime,
    message_content             TEXT            AS MessageContent,
    message_content_decrypted   TEXT            AS MessageContentDecrypted,
    status                      INTEGER         AS MessageStatus NOT NULL,
    seen                        INTEGER         AS Seen NOT NULL,
    sender_alias                TEXT            AS SenderAlias,
    sender_pic                  TEXT            AS PhotoUrl,
    original_muid               TEXT            AS MessageMUID,
    reply_uuid                  TEXT            AS ReplyUUID,
    muid                        TEXT            AS MessageMUID,
    flagged                     INTEGER         AS Flagged NOT NULL DEFAULT 0,
    recipient_alias             TEXT            AS RecipientAlias,
    recipient_pic               TEXT            AS PhotoUrl,
    push                        INTEGER         AS Push DEFAULT 0,
    person                      TEXT            AS MessagePerson,
    thread_uuid                 TEXT            AS ThreadUUID,
    error_message               TEXT            AS ErrorMessage,
    tag_message                 TEXT            AS TagMessage
);

messageGetAllReactionsByUUID:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND (type = 29
    AND reply_uuid IN :reply_uuids
);

messageGetAllMessagesByThreadUUID:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND type != 29
AND thread_uuid IN :thread_uuid;

messagesGetAllThreadUUIDByChatId:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND type != 29
AND thread_uuid IS NOT NULL
ORDER BY date DESC;

messageGetAllPurchaseItemsByMUID:
SELECT *
FROM messageDbo
WHERE chat_id = :chat_id
AND type IN (7, 8, 9)
AND (muid IN :muids OR original_muid IN :muids);

messageGetAllByUUID:
SELECT *
FROM messageDbo
WHERE uuid IN :uuids;

messageGetById:
SELECT *
FROM messageDbo
WHERE id = ?;

messageGetMessagesByIds:
SELECT *
FROM messageDbo
WHERE id IN ?;

messageGetByPaymentHashes:
SELECT *
FROM messageDbo
WHERE payment_hash IN :payment_hashes;

messageGetByMuid:
SELECT *
FROM messageDbo
WHERE muid = ?
ORDER BY id ASC
LIMIT 1;

messageLastMemberRequestGetBySenderAlias:
SELECT *
FROM messageDbo
WHERE sender_alias = ?
AND chat_id = :chat_id
AND type = 19
ORDER BY id ASC
LIMIT 1;

messageLastMemberRequestGetByContactId:
SELECT *
FROM messageDbo
WHERE sender = ?
AND chat_id = :chat_id
AND type = 19
ORDER BY id DESC
LIMIT 1;

messageGetByUUID:
SELECT *
FROM messageDbo
WHERE uuid = ?;

messageGetToShowByUUID:
SELECT *
FROM messageDbo
WHERE uuid = ?
AND type IN(0, 6)
LIMIT 1;

messageGetLowestProvisionalMessageId:
SELECT id
FROM messageDbo
WHERE id < 0
ORDER BY id
LIMIT 1;

messageGetMaxId:
SELECT MAX(id) FROM messageDbo;

messageGetLastMessage:
SELECT * FROM messageDbo
WHERE id = (SELECT MAX(id) FROM messageDbo);

messageGetMaxIdByChatId:
SELECT *
FROM messageDbo
WHERE id = (
    SELECT MAX(id)
    FROM messageDbo
    WHERE chat_id = ?
);

messageGetSentConfirmedMessages:
SELECT *
FROM messageDbo
WHERE sender == 0
 AND status == 1
 AND chat_id = :chat_id;

messageGetDeletedMessages:
SELECT *
FROM messageDbo
WHERE type == 17;

messageGetOkKeysByChatId:
SELECT id
FROM messageDbo
WHERE chat_id = :chat_id
  AND type IN (2, 3, 5, 6, 10, 11, 29);

messageGetAllToShowByChatId:
SELECT *
FROM messageDbo
WHERE chat_id = ?
AND (
    type = 0 OR
    type = 2 OR
    type = 3 OR
    type = 5 OR
    type = 6 OR
    type = 14 OR
    type = 15 OR
    type = 16 OR
    type = 19 OR
    type = 20 OR
    type = 21 OR
    type = 22 OR
    type = 25 OR
    (type = 29 AND reply_uuid IS NULL) OR
    type = 32
)
ORDER BY date DESC
LIMIT ?;

messageCountAllToShowByChatId:
SELECT COUNT(*)
FROM messageDbo
WHERE chat_id = ?
AND (
    type = 0 OR
    type = 2 OR
    type = 3 OR
    type = 5 OR
    type = 6 OR
    type = 14 OR
    type = 15 OR
    type = 16 OR
    type = 19 OR
    type = 20 OR
    type = 21 OR
    type = 22 OR
    type = 25 OR
    (type = 29 AND reply_uuid IS NULL) OR
    type = 32
)
ORDER BY date DESC;

messageGetAllToShowByChatIdPaginated:
SELECT *
FROM messageDbo
WHERE chat_id = ?
AND (
    type = 0 OR
    type = 2 OR
    type = 3 OR
    type = 5 OR
    type = 6 OR
    type = 14 OR
    type = 15 OR
    type = 16 OR
    type = 19 OR
    type = 20 OR
    type = 21 OR
    type = 22 OR
    type = 25 OR
    (type = 29 AND reply_uuid IS NULL) OR
    type = 32
)
ORDER BY date DESC
LIMIT :limit OFFSET :offset;

messageGetUnseenIncomingMessageCountByChatId:
SELECT COUNT(*)
FROM messageDbo
WHERE sender != :ownerId
AND seen = 0
AND chat_id = ?;

messageGetUnseenIncomingMentionsCountByChatId:
SELECT COUNT(*)
FROM messageDbo
WHERE sender != :ownerId
AND seen = 0
AND push = 1
AND chat_id = ?;

messageGetUnseenIncomingMessageCountByChatType:
SELECT COUNT(*)
FROM messageDbo
LEFT JOIN chatDbo
    ON chatDbo.id = messageDbo.chat_id
WHERE messageDbo.sender != :ownerId
AND messageDbo.sender NOT IN :blocked_contact_ids
AND messageDbo.seen = 0
AND chatDbo.type = :chatType;

messageGetAmountSumForMessagesStartingWith:
SELECT SUM(amount)
FROM messageDbo
WHERE (chat_id IS NULL OR chat_id = 0)
AND (message_content LIKE :message_content1 OR message_content LIKE :message_content2);

messageUpdateSeenByChatId:
UPDATE messageDbo
SET seen = :seen
WHERE chat_id = ?;

messageUpdateContentDecrypted:
UPDATE messageDbo
SET message_content_decrypted = :message_content_decrypted
WHERE id = ?;

messageUpdateStatus:
UPDATE messageDbo
SET status = :status
WHERE id = ?;

messageUpdateStatusAndPaymentHashByTag:
UPDATE messageDbo
SET status = :status,
    payment_hash = :payment_hash,
    error_message = :error_message
WHERE tag_message = ?;

messageUpdateStatusByTag:
UPDATE messageDbo
SET status = :status,
    error_message = :error_message
WHERE tag_message = ?;

messageUpdateStatusByUUID:
UPDATE messageDbo
SET status = :status
WHERE uuid = ?;

messageUpdateMessagesStatusByUUIDS:
UPDATE messageDbo
SET status = :status
WHERE uuid IN ?;

messageUpdateInvoiceAsPaidByPaymentHash:
UPDATE messageDbo
SET status = 1
WHERE type = 2 AND payment_hash = ?;

messageUpdateFlagged:
UPDATE messageDbo
SET flagged = :flagged
WHERE id = ?;

messageUpdateTagAndUUID:
UPDATE messageDbo
SET tag_message = :tag_message,
    uuid = :uuid,
    status = 1
WHERE id = ?;

messageUpdateUUIDByUUID:
UPDATE messageDbo
SET uuid = :newUuid
WHERE uuid = ?;

messageUpdateSeenByChatIdAndId:
UPDATE messageDbo
SET seen = 1
WHERE chat_id = ?
AND id <= ?;


-- If the message exists in the DB, it will update all fields _except_
    -- for message_content_decrypted as to not overwrite it.
messageUpsert {
    UPDATE messageDbo
    SET status = :status,
        seen = :seen,
        sender_alias = :sender_alias,
        sender_pic = :sender_pic,
        original_muid = :original_muid,
        reply_uuid = :reply_uuid,
        type = :type,
        recipient_alias = :recipient_alias,
        recipient_pic = :recipient_pic,
        push = :push,
        person = :person,
        thread_uuid = :thread_uuid,
        error_message = :error_message,
        tag_message = :tag_message
    WHERE id = :id;

    INSERT OR IGNORE INTO messageDbo(
        id,
        uuid,
        chat_id,
        type,
        sender,
        receiver,
        amount,
        payment_hash,
        payment_request,
        date,
        expiration_date,
        message_content,
        message_content_decrypted,
        status,
        seen,
        sender_alias,
        sender_pic,
        original_muid,
        reply_uuid,
        muid,
        flagged,
        recipient_alias,
        recipient_pic,
        push,
        person,
        thread_uuid,
        error_message,
        tag_message
    )
    VALUES (
        :id,
        :uuid,
        :chat_id,
        :type,
        :sender,
        :receiver,
        :amount,
        :payment_hash,
        :payment_request,
        :date,
        :expiration_date,
        :message_content,
        :message_content_decrypted,
        :status,
        :seen,
        :sender_alias,
        :sender_pic,
        :original_muid,
        :reply_uuid,
        :muid,
        :flagged,
        :recipient_alias,
        :recipient_pic,
        :push,
        :person,
        :thread_uuid,
        :error_message,
        :tag_message
    );
}

messageDeleteById:
DELETE FROM messageDbo
WHERE id = ?;

messageDeleteByUUID:
DELETE FROM messageDbo
WHERE uuid = ?;

messageDeleteByChatId:
DELETE FROM messageDbo
WHERE chat_id = ?;

messageDeleteAll:
DELETE FROM messageDbo;

CREATE TABLE messageMediaDbo(
    id                          INTEGER         AS MessageId NOT NULL PRIMARY KEY,
    chat_id                     INTEGER         AS ChatId NOT NULL,
    media_key                   TEXT            AS MediaKey,
    media_key_decrypted         TEXT            AS MediaKeyDecrypted,
    media_type                  TEXT            AS MediaType NOT NULL,
    media_token                 TEXT            AS MediaToken NOT NULL,
    local_file                  TEXT            AS Path,
    file_name                   TEXT            AS FileName
);

messageMediaGetById:
SELECT *
FROM messageMediaDbo
WHERE id = ?;

messageMediaUpdateMediaKeyDecrypted:
UPDATE messageMediaDbo
SET media_key_decrypted = :media_key_decrypted
WHERE id = ?;

messageMediaUpdateFile:
UPDATE messageMediaDbo
SET local_file = :local_file,
    file_name = ?
WHERE id = ?;

messageMediaUpsert {
    UPDATE messageMediaDbo
    SET media_key = :media_key,
        media_type = :media_type,
        media_token = :media_token
    WHERE id = :id;

    INSERT OR IGNORE INTO messageMediaDbo(
        id,
        chat_id,
        media_key,
        media_key_decrypted,
        media_type,
        media_token,
        local_file,
        file_name
    )
    VALUES(
        :id,
        :chat_id,
        :media_key,
        :media_key_decrypted,
        :media_type,
        :media_token,
        :local_file,
        :file_name
    );
}

messageMediaDeleteById:
DELETE FROM messageMediaDbo
WHERE id = ?;

messageMediaDeleteByChatId:
DELETE FROM messageMediaDbo
WHERE chat_id = ?;

messageMediaDeleteAll:
DELETE FROM messageMediaDbo;

CREATE TABLE subscriptionDbo(
    id                          INTEGER         AS SubscriptionId NOT NULL PRIMARY KEY,
    cron                        TEXT            AS Cron NOT NULL,
    amount                      INTEGER         AS Sat NOT NULL,
    end_number                  INTEGER         AS EndNumber,
    count                       INTEGER         AS SubscriptionCount NOT NULL,
    end_date                    INTEGER         AS DateTime,
    ended                       INTEGER         AS Boolean DEFAULT 0 NOT NULL,
    paused                      INTEGER         AS Boolean DEFAULT 0 NOT NULL,
    created_at                  INTEGER         AS DateTime NOT NULL,
    updated_at                  INTEGER         AS DateTime NOT NULL,
    chat_id                     INTEGER         AS ChatId NOT NULL,
    contact_id                  INTEGER         AS ContactId NOT NULL
);

subscriptionGetById:
SELECT *
FROM subscriptionDbo
WHERE id = ?;

subscriptionGetLastActiveByContactId:
SELECT *
FROM subscriptionDbo
WHERE ended = 0 AND contact_id = ?
ORDER BY id DESC
LIMIT 1;

subscriptionGetAllByChatId:
SELECT *
FROM subscriptionDbo
WHERE chat_id = ?;

subscriptionGetAll:
SELECT *
FROM subscriptionDbo;

subscriptionUpsert {
    UPDATE subscriptionDbo
    SET cron = :cron,
        amount = :amount,
        end_number = :end_number,
        count = :count,
        end_date = :end_date,
        ended = :ended,
        paused = :paused,
        created_at = :created_at,
        updated_at = :updated_at,
        chat_id = :chat_id,
        contact_id = :contact_id
    WHERE id = :id;

    INSERT OR IGNORE INTO subscriptionDbo(
        id,
        cron,
        amount,
        end_number,
        count,
        end_date,
        ended,
        paused,
        created_at,
        updated_at,
        chat_id,
        contact_id
    )
    VALUES (
        :id,
        :cron,
        :amount,
        :end_number,
        :count,
        :end_date,
        :ended,
        :paused,
        :created_at,
        :updated_at,
        :chat_id,
        :contact_id
    );
}

subscriptionDeleteById:
DELETE FROM subscriptionDbo
WHERE id = ?;

subscriptionUpdatePaused:
UPDATE subscriptionDbo
SET paused = :paused
WHERE id = ?;

subscriptionUpdateEnded:
UPDATE subscriptionDbo
SET ended = :ended
WHERE id = ?;

subscriptionDeleteByContactId:
DELETE FROM subscriptionDbo
WHERE contact_id = ?;

subscriptionDeleteAll:
DELETE FROM subscriptionDbo;

CREATE TABLE feedDbo(
    id                          TEXT               AS FeedId NOT NULL PRIMARY KEY,
    feed_type                   INTEGER            AS FeedType NOT NULL,
    title                       TEXT               AS FeedTitle NOT NULL,
    description                 TEXT               AS FeedDescription,
    feed_url                    TEXT               AS FeedUrl NOT NULL,
    author                      TEXT               AS FeedAuthor,
    generator                   TEXT               AS FeedGenerator,
    image_url                   TEXT               AS PhotoUrl,
    owner_url                   TEXT               AS FeedUrl,
    link                        TEXT               AS FeedUrl,
    date_published              INTEGER            AS DateTime,
    date_updated                INTEGER            AS DateTime,
    content_type                TEXT               AS FeedContentType,
    language                    TEXT               AS FeedLanguage,
    items_count                 INTEGER            AS FeedItemsCount DEFAULT 0 NOT NULL,
    current_item_id             TEXT               AS FeedId,
    chat_id                     INTEGER            AS ChatId NOT NULL,
    subscribed                  INTEGER            AS Subscribed NOT NULL DEFAULT 1
);

feedUpsert {
    UPDATE feedDbo
    SET feed_type = :feed_type,
        title = :title,
        feed_url = :feed_url,
        author = :author,
        owner_url = :owner_url,
        link = :link,
        date_published = :date_published,
        date_updated = :date_updated,
        content_type = :content_type,
        language = :language,
        items_count = :items_count,
        current_item_id = :current_item_id,
        chat_id = :chat_id,
        subscribed = :subscribed
    WHERE id = :id;

    INSERT OR IGNORE INTO feedDbo(
        id,
        feed_type,
        title,
        description,
        feed_url,
        author,
        generator,
        image_url,
        owner_url,
        link,
        date_published,
        date_updated,
        content_type,
        language,
        items_count,
        current_item_id,
        chat_id,
        subscribed
    )
    VALUES (
        :id,
        :feed_type,
        :title,
        :description,
        :feed_url,
        :author,
        :generator,
        :image_url,
        :owner_url,
        :link,
        :date_published,
        :date_updated,
        :content_type,
        :language,
        :items_count,
        :current_item_id,
        :chat_id,
        :subscribed
    );
}

feedGetAll:
SELECT *
FROM feedDbo
ORDER BY id DESC;

feedGetAllSubscribed:
SELECT *
FROM feedDbo
WHERE subscribed = 1
ORDER BY id DESC;

feedGetByChatId:
SELECT *
FROM feedDbo
WHERE chat_id = ?
ORDER BY id DESC
LIMIT 1;

feedGetAllByChatId:
SELECT *
FROM feedDbo
WHERE chat_id = ?
ORDER BY id DESC;

feedGetByChatIdAndType:
SELECT *
FROM feedDbo
WHERE chat_id = ?
AND feed_type = ?
ORDER BY id DESC
LIMIT 1;

feedGetAllByFeedType:
SELECT *
FROM feedDbo
WHERE feed_type = ?
AND subscribed = 1
ORDER BY id DESC;

feedGetAllByIds:
SELECT *
FROM feedDbo
WHERE id IN ?;

feedGetById:
SELECT *
FROM feedDbo
WHERE id = ?;

feedGetByIds:
SELECT *
FROM feedDbo
WHERE id IN ?;

feedGetAllByTitle:
SELECT *
FROM feedDbo
WHERE (title LIKE :title);

feedGetAllByTitleAndType:
SELECT *
FROM feedDbo
WHERE (title LIKE :title)
AND feed_type = :feed_type;

feedUpdateCurrentItemIdByChatId:
UPDATE feedDbo
SET current_item_id = :item_id
WHERE chat_id = ?;

feedUpdateCurrentItemId:
UPDATE feedDbo
SET current_item_id = :item_id
WHERE id = ?;

feedUpdateSubscribe:
UPDATE feedDbo
SET subscribed = :subscribed
WHERE id = ?;

feedDeleteById:
DELETE
FROM feedDbo
WHERE id = ?;

feedDeleteAll:
DELETE FROM feedDbo;

CREATE TABLE feedItemDbo(
    id                          TEXT               AS FeedId NOT NULL PRIMARY KEY,
    title                       TEXT               AS FeedTitle NOT NULL,
    description                 TEXT               AS FeedDescription,
    date_published              INTEGER            AS DateTime,
    date_updated                INTEGER            AS DateTime,
    author                      TEXT               AS FeedAuthor,
    content_type                TEXT               AS FeedContentType,
    enclosure_length            INTEGER            AS FeedEnclosureLength,
    enclosure_url               TEXT               AS FeedUrl NOT NULL,
    enclosure_type              TEXT               AS FeedEnclosureType,
    image_url                   TEXT               AS PhotoUrl,
    thumbnail_url               TEXT               AS PhotoUrl,
    link                        TEXT               AS FeedUrl,
    feed_id                     TEXT               AS FeedId NOT NULL,
    duration                    INTEGER            AS FeedItemDuration,
    local_file                  TEXT               AS Path
);

feedItemUpsert {
    UPDATE feedItemDbo
    SET title = :title,
        description = :description,
        date_published = :date_published,
        date_updated = :date_updated,
        author = :author,
        content_type = :content_type,
        enclosure_length = :enclosure_length,
        enclosure_url = :enclosure_url,
        enclosure_type = :enclosure_type,
        image_url = :image_url,
        thumbnail_url = :thumbnail_url,
        link = :link,
        feed_id = :feed_id,
        duration = :duration
    WHERE id = :id;

    INSERT OR IGNORE INTO feedItemDbo(
        id,
        title,
        description,
        date_published,
        date_updated,
        author,
        content_type,
        enclosure_length,
        enclosure_url,
        enclosure_type,
        image_url,
        thumbnail_url,
        link,
        feed_id,
        duration
    )
    VALUES (
        :id,
        :title,
        :description,
        :date_published,
        :date_updated,
        :author,
        :content_type,
        :enclosure_length,
        :enclosure_url,
        :enclosure_type,
        :image_url,
        :thumbnail_url,
        :link,
        :feed_id,
        :duration
    );
}

feedItemGetById:
SELECT *
FROM feedItemDbo
WHERE id = ?;

feedItemsGetByFeedId:
SELECT *
FROM feedItemDbo
WHERE feed_id = ?
ORDER BY date_published DESC;

feedItemsGetByFeedIds:
SELECT *
FROM feedItemDbo
WHERE feed_id IN ?
ORDER BY date_published DESC;

feedItemDeleteById:
DELETE
FROM feedItemDbo
WHERE id = ?;

feedItemsDeleteOldByFeedId:
DELETE
FROM feedItemDbo
WHERE feed_id = ?
AND id NOT IN ?;

feedItemsDeleteByFeedId:
DELETE
FROM feedItemDbo
WHERE feed_id = ?;

feedItemUpdateLocalFile:
UPDATE feedItemDbo
SET local_file = :local_file
WHERE id = ?;

feedItemDeleteAll:
DELETE FROM feedItemDbo;

CREATE TABLE feedModelDbo(
    id                          TEXT               AS FeedId NOT NULL PRIMARY KEY,
    type                        TEXT               AS FeedModelType NOT NULL,
    suggested                   REAL               AS FeedModelSuggested NOT NULL
);

feedModelUpsert {
    UPDATE feedModelDbo
    SET type = :type,
        suggested = :suggested
    WHERE id = :id;

    INSERT OR IGNORE INTO feedModelDbo(
        id,
        type,
        suggested
    )
    VALUES (
        :id,
        :type,
        :suggested
    );
}

feedModelGetById:
SELECT *
FROM feedModelDbo
WHERE id = ?;

feedModelDeleteById:
DELETE
FROM feedModelDbo
WHERE id = ?;

feedModelDeleteAll:
DELETE FROM feedModelDbo;

CREATE TABLE feedDestinationDbo(
    address                     TEXT            AS FeedDestinationAddress NOT NULL,
    split                       REAL            AS FeedDestinationSplit NOT NULL,
    type                        TEXT            AS FeedDestinationType NOT NULL,
    feed_id                     TEXT            AS FeedId NOT NULL,
    PRIMARY KEY (feed_id, address)
);

feedDestinationUpsert {
    UPDATE feedDestinationDbo
        SET address = :address,
            split = :split,
            type = :type
        WHERE address = :address
        AND feed_id = :feed_id;

    INSERT OR IGNORE INTO feedDestinationDbo(
        address,
        split,
        type,
        feed_id
    )
    VALUES (
        :address,
        :split,
        :type,
        :feed_id
    );
}

feedDestinationDeleteByFeedId:
DELETE FROM feedDestinationDbo
WHERE feed_id = ?;

feedDestinationsGetByFeedId:
SELECT *
FROM feedDestinationDbo
WHERE feed_id = ?;

feedDestinationDeleteAll:
DELETE FROM feedDestinationDbo;